generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth"]
}

enum Provider {
  CREDENTIALS
  GOOGLE
  CI

  @@schema("auth")
}

enum StatusEnum {
  ACTIVE
  INACTIVE
  BLOCKED
  SUSPENDED
  DEACTIVATED
  PENDING_VERIFICATION
  PASSWORD_EXPIRED
  LOCKED
  DELETED
  EXTERNAL
  ARCHIVED

  @@schema("auth")
}

model User {
  id          String        @id @default(uuid())
  lastIp      String?
  statusId    String?
  Status      StatusEnum    @default(ACTIVE)
  authMethods AuthMethods[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  roleId      String?
  Role        Role?         @relation(fields: [roleId], references: [id])

  @@index([Status])
  @@index([lastIp])
  @@index([roleId])
  @@map("users")
  @@schema("auth")
}

model AuthMethods {
  id        String     @id @default(uuid())
  userId    String     @unique
  provider  Provider
  password  String?
  google_id String?    @unique
  ci_number String?    @unique
  phone     String?
  photo     String?
  email     String?
  Status    StatusEnum @default(DEACTIVATED)

  extra_data Json?
  verified   Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())

  @@unique([userId, provider])
  @@index([email])
  @@index([provider])
  @@index([google_id])
  @@index([ci_number])
  @@index([email, provider])
  @@schema("auth")
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  users          User[]
  RolePermission RolePermission[]

  @@index([name], name: "idx_roles_name")
  @@map("roles")
  @@schema("auth")
}

model Permissons {
  id             String            @id @default(uuid())
  name           String            @unique
  description    String?
  RolePermission RolePermission[]
  isActive       Boolean
  ScopeRol       ScopePermission[]

  @@index([name], name: "idx_permissons_name")
  @@map("permissons")
  @@schema("auth")
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permissons @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
  @@schema("auth")
}

model OAuthClient {
  id                         String                       @id @default(uuid())
  client_id                  String?                      @unique
  client_secret              String?
  name                       String
  description                String?
  redirect_uris              String[]
  webhook_url                String?
  domain                     String?
  Status                     StatusEnum                   @default(DEACTIVATED)
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime?                    @updatedAt
  oAuthClientScopePermission OAuthClientScopePermission[]

  @@map("oauth_clients")
  @@schema("auth")
}

model Scope {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  Status      StatusEnum @default(ACTIVE)

  ScopeRol                   ScopePermission[]
  OAuthClientScopePermission OAuthClientScopePermission[]

  @@schema("auth")
}

model OAuthClientScopePermission {
  clientId String
  scopeId  String

  client OAuthClient @relation(fields: [clientId], references: [id])
  scope  Scope       @relation(fields: [scopeId], references: [id])

  @@id([clientId, scopeId])
  @@map("oauth_client_scope_permissions")
  @@schema("auth")
}

model ScopePermission {
  id      String @id @default(uuid())
  scopeId String
  scope   Scope  @relation(fields: [scopeId], references: [id])

  permissionId String
  permission   Permissons @relation(fields: [permissionId], references: [id])

  @@schema("auth")
}
